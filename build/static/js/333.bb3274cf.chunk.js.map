{"version":3,"file":"static/js/333.bb3274cf.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/random/src.ts/shuffle.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/web3-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts"],"sourcesContent":["export const version = \"providers/5.5.3\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: address,\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction checkError(method: string, error: any, params: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string, network?: Networkish) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        super(url, network);\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this._websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this._websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this._websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this._websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this._websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this._websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nexport function shuffled(array: Array<any>): Array<any> {\n    array = array.slice();\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n\n    return array;\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        logger.checkNew(new.target, FallbackProvider);\n\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n","\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],"names":["version","logger","Logger","Formatter","checkNew","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","v","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","Error","strict","substring","isHexString","throwArgumentError","result","length","getAddress","hexDataSlice","AddressZero","getContractAddress","hexValue","hexDataLength","error","hexZeroPad","format","author","_difficulty","check","_block","gas","isZero","input","chainId","networkId","parseInt","replace","parseTransaction","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log","checkTopic","topic","serializeTopics","slice","pop","unique","sorted","Object","keys","sort","join","getEventTag","eventName","indexOf","ForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","split","comps","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","concat","sha256","matcherIpfs","RegExp","matchers","_parseString","toUtf8String","_parseBytes","offset","getIpfsLink","link","match","Resolver","provider","name","resolvedAddress","formatter","selector","parameters","tx","hexConcat","namehash","call","code","CALL_EXCEPTION","coinType","hexBytes","coinInfo","String","throwError","operation","bytes","arrayify","words","bech32","unshift","HashZero","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","i","scheme","url","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","toString","metadataUrl","fetchJson","metadata","JSON","stringify","imageUrl","image","ipfs","swarm","keyBytes","toUtf8Bytes","hexlify","defaultFormatter","nextPollId","BaseProvider","network","Provider","_events","_emitted","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","poll","then","event","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","getNetwork","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","Math","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","getLogs","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","eq","cancelled","replacement","_wrapTransaction","timer","unref","clearTimeout","method","addressOrName","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","_getTransactionRequest","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","_getResolver","ensAddress","getResolver","resolver","reverseName","resolverAddress","nameOrAddress","getAvatar","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","errorGas","checkError","message","body","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","sender","constructor","hexlifyTransaction","sendUncheckedTransaction","domain","types","_TypedDataEncoder","populated","password","Signer","allowedTransactionKeys","JsonRpcProvider","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","a","request","id","jsonrpc","action","deepCopy","cache","connection","response","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","WS","WebSocket","NextId","WebSocketProvider","_wsReady","_websocket","onopen","_requests","onmessage","messageEvent","parse","callback","sub","_subs","subscription","processFunc","fauxPoll","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","CONNECTING","onerror","close","StaticJsonRpcProvider","_super","UrlJsonRpcProvider","apiKey","checkAbstract","defaultApiKey","AlchemyWebSocketProvider","AlchemyProvider","host","arguments","allowGzip","throttleCallback","attempt","CloudflareProvider","getTransactionPostData","maxFeePerGs","set","storageKeys","throttleRetry","getJsonResult","checkLogTag","EtherscanProvider","getBaseUrl","module","query","reduce","accum","baseUrl","apikey","post","getPostUrl","getUrl","getPostData","procFunc","throttleSlotInterval","payloadStr","headers","fetch","txhash","postData","topic0","blocks","getBlock","parseFloat","ethusd","endBlock","startblock","endblock","item","timeStamp","shuffled","j","floor","random","tmp","checkNetworks","networks","median","maxDelta","middle","b","serialize","nextRid","cancel","promise","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","start","getProcessFunc","normalize","configs","c","ceil","_highestBlockNumber","quorum","tally","count","normalizedTally","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","FallbackProvider","providers","providerConfigs","configOrProvider","index","stallTimeout","priority","total","sendTransaction","results","first","t0","inflightWeight","staller","backend","waiting","race","errors","errorCode","props","IpcProvider","defaultProjectId","InfuraWebSocketProvider","InfuraProvider","projectId","projectSecret","apiKeyObj","assertArgument","argument","user","JsonRpcBatchProvider","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","n","applicationId","loadBalancer","applicationSecretKey","buildWeb3LegacyFetcher","sendFunc","fetcher","Web3Provider","path","jsonRpcFetchFunc","subprovider","isMetaMask","buildEip1193Fetcher","sendAsync","getDefaultProvider","options","_defaultProvider"],"sourceRoot":""}